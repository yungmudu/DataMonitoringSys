@page "/charts"
@rendermode InteractiveServer
@inject IDataPointService DataPointService
@inject IEngineeringUnitService UnitService
@inject IJSRuntime JSRuntime
@attribute [Authorize]

<PageTitle>Charts & Analytics - Engineering Dashboard</PageTitle>

<div class="mb-8">
    <h1 class="text-3xl font-bold text-gray-900">Charts & Analytics</h1>
    <p class="mt-2 text-gray-600">Visualize engineering data trends and patterns</p>
</div>

<!-- Filters -->
<div class="bg-white rounded-lg shadow p-6 mb-8">
    <h2 class="text-lg font-semibold text-gray-900 mb-4">Filters</h2>
    <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
        <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">Engineering Unit</label>
            <select @bind="selectedUnitId" @bind:after="OnFilterChanged" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                <option value="">All Units</option>
                @if (engineeringUnits != null)
                {
                    @foreach (var unit in engineeringUnits)
                    {
                        <option value="@unit.Id">@unit.Name</option>
                    }
                }
            </select>
        </div>
        
        <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">Parameter</label>
            <select @bind="selectedParameter" @bind:after="OnFilterChanged" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500">
                <option value="">All Parameters</option>
                @if (parameterNames != null)
                {
                    @foreach (var param in parameterNames)
                    {
                        <option value="@param">@param</option>
                    }
                }
            </select>
        </div>
        
        <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">Start Date</label>
            <input type="date" @bind="startDate" @bind:after="OnFilterChanged" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" />
        </div>
        
        <div>
            <label class="block text-sm font-medium text-gray-700 mb-2">End Date</label>
            <input type="date" @bind="endDate" @bind:after="OnFilterChanged" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" />
        </div>
    </div>
    
    <div class="mt-4 flex space-x-4">
        <button @onclick="RefreshCharts" class="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500">
            Refresh Charts
        </button>
        <button @onclick="ResetFilters" class="px-4 py-2 border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500">
            Reset Filters
        </button>
    </div>
</div>

<!-- Charts -->
<div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
    <!-- Line Chart -->
    <div class="bg-white rounded-lg shadow p-6">
        <h3 class="text-lg font-semibold text-gray-900 mb-4">Trend Analysis (Line Chart)</h3>
        <div class="relative h-96">
            <canvas id="lineChart"></canvas>
        </div>
    </div>
    
    <!-- Bar Chart -->
    <div class="bg-white rounded-lg shadow p-6">
        <h3 class="text-lg font-semibold text-gray-900 mb-4">Parameter Comparison (Bar Chart)</h3>
        <div class="relative h-96">
            <canvas id="barChart"></canvas>
        </div>
    </div>
    
    <!-- Pie Chart -->
    <div class="bg-white rounded-lg shadow p-6">
        <h3 class="text-lg font-semibold text-gray-900 mb-4">Data Distribution by Unit</h3>
        <div class="relative h-96">
            <canvas id="pieChart"></canvas>
        </div>
    </div>
    
    <!-- Scatter Plot -->
    <div class="bg-white rounded-lg shadow p-6">
        <h3 class="text-lg font-semibold text-gray-900 mb-4">Value Distribution (Scatter Plot)</h3>
        <div class="relative h-96">
            <canvas id="scatterChart"></canvas>
        </div>
    </div>
</div>

<!-- Real-time Update Toggle -->
<div class="mt-8 bg-white rounded-lg shadow p-6">
    <div class="flex items-center justify-between">
        <div>
            <h3 class="text-lg font-semibold text-gray-900">Real-time Updates</h3>
            <p class="text-sm text-gray-600">Automatically refresh charts every 30 seconds</p>
        </div>
        <label class="relative inline-flex items-center cursor-pointer">
            <input type="checkbox" @bind="realTimeUpdates" @bind:after="ToggleRealTimeUpdates" class="sr-only peer">
            <div class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
        </label>
    </div>
</div>

@code {
    private IEnumerable<EngineeringUnit>? engineeringUnits;
    private IEnumerable<string>? parameterNames;
    private IEnumerable<DataPoint>? dataPoints;
    
    private string? selectedUnitId;
    private string? selectedParameter;
    private DateTime? startDate;
    private DateTime? endDate;
    private bool realTimeUpdates = false;
    
    private Timer? refreshTimer;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            engineeringUnits = await UnitService.GetActiveUnitsAsync();
            parameterNames = await DataPointService.GetParameterNamesAsync();
            
            // Set default date range (last 30 days)
            endDate = DateTime.Today;
            startDate = DateTime.Today.AddDays(-30);
            
            await LoadData();
        }
        catch (Exception ex)
        {
            // Handle error
            Console.WriteLine($"Error loading chart data: {ex.Message}");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await InitializeCharts();
        }
    }

    private async Task LoadData()
    {
        try
        {
            int? unitId = string.IsNullOrEmpty(selectedUnitId) ? null : int.Parse(selectedUnitId);
            dataPoints = await DataPointService.GetDataPointsAsync(unitId, startDate, endDate, selectedParameter);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading data: {ex.Message}");
        }
    }

    private async Task OnFilterChanged()
    {
        await LoadData();
        await UpdateCharts();
    }

    private async Task RefreshCharts()
    {
        await LoadData();
        await UpdateCharts();
    }

    private void ResetFilters()
    {
        selectedUnitId = null;
        selectedParameter = null;
        startDate = DateTime.Today.AddDays(-30);
        endDate = DateTime.Today;
        
        InvokeAsync(async () =>
        {
            await LoadData();
            await UpdateCharts();
        });
    }

    private void ToggleRealTimeUpdates()
    {
        if (realTimeUpdates)
        {
            refreshTimer = new Timer(async _ =>
            {
                await InvokeAsync(async () =>
                {
                    await LoadData();
                    await UpdateCharts();
                    StateHasChanged();
                });
            }, null, TimeSpan.FromSeconds(30), TimeSpan.FromSeconds(30));
        }
        else
        {
            refreshTimer?.Dispose();
            refreshTimer = null;
        }
    }

    private async Task InitializeCharts()
    {
        await JSRuntime.InvokeVoidAsync("initializeCharts");
        await UpdateCharts();
    }

    private async Task UpdateCharts()
    {
        if (dataPoints == null) return;

        try
        {
            // Prepare data for line chart (time series)
            var lineChartData = dataPoints
                .Where(dp => !string.IsNullOrEmpty(selectedParameter) ? dp.ParameterName == selectedParameter : true)
                .OrderBy(dp => dp.Timestamp)
                .Select(dp => new { 
                    x = dp.Timestamp.ToString("yyyy-MM-dd HH:mm"), 
                    y = dp.Value 
                })
                .ToArray();

            // Prepare data for bar chart (average by parameter)
            var barChartData = dataPoints
                .GroupBy(dp => dp.ParameterName)
                .Select(g => new { 
                    label = g.Key, 
                    value = g.Average(dp => dp.Value) 
                })
                .ToArray();

            // Prepare data for pie chart (count by engineering unit)
            var pieChartData = dataPoints
                .GroupBy(dp => dp.EngineeringUnit?.Name ?? "Unknown")
                .Select(g => new { 
                    label = g.Key, 
                    value = g.Count() 
                })
                .ToArray();

            // Prepare data for scatter plot
            var scatterChartData = dataPoints
                .Select((dp, index) => new { 
                    x = index, 
                    y = dp.Value,
                    label = dp.ParameterName
                })
                .ToArray();

            await JSRuntime.InvokeVoidAsync("updateCharts", 
                lineChartData, 
                barChartData, 
                pieChartData, 
                scatterChartData);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating charts: {ex.Message}");
        }
    }

    public void Dispose()
    {
        refreshTimer?.Dispose();
    }
}

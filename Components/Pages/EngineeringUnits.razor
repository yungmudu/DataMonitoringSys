@page "/units"
@rendermode InteractiveServer
@inject IEngineeringUnitService UnitService
@inject IJSRuntime JSRuntime
@attribute [Authorize]

<PageTitle>Engineering Units - Engineering Dashboard</PageTitle>

<div class="mb-8">
    <h1 class="text-3xl font-bold text-gray-900">Engineering Units</h1>
    <p class="mt-2 text-gray-600">Manage engineering units and departments</p>
</div>

<!-- Add New Unit Button -->
<div class="mb-6">
    <button @onclick="ShowAddUnitModal" class="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-md font-medium">
        <svg class="w-5 h-5 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
        </svg>
        Add New Unit
    </button>
</div>

<!-- Units Grid -->
<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
    @if (engineeringUnits != null)
    {
        @foreach (var unit in engineeringUnits)
        {
            <div class="bg-white rounded-lg shadow p-6 @(unit.IsActive ? "" : "opacity-60")">
                <div class="flex justify-between items-start mb-4">
                    <div>
                        <h3 class="text-lg font-semibold text-gray-900">@unit.Name</h3>
                        <p class="text-sm text-gray-600">Code: @unit.Code</p>
                    </div>
                    <div class="flex space-x-2">
                        <button @onclick="() => EditUnit(unit)" class="text-blue-600 hover:text-blue-800">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                            </svg>
                        </button>
                        <button @onclick="() => ToggleUnitStatus(unit)" class="text-gray-600 hover:text-gray-800">
                            @if (unit.IsActive)
                            {
                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18.364 18.364A9 9 0 005.636 5.636m12.728 12.728L5.636 5.636m12.728 12.728L5.636 5.636"></path>
                                </svg>
                            }
                            else
                            {
                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                </svg>
                            }
                        </button>
                    </div>
                </div>
                
                @if (!string.IsNullOrEmpty(unit.Description))
                {
                    <p class="text-sm text-gray-700 mb-4">@unit.Description</p>
                }
                
                <div class="grid grid-cols-2 gap-4 text-sm">
                    <div>
                        <span class="text-gray-500">Users:</span>
                        <span class="font-medium">@unit.Users.Count</span>
                    </div>
                    <div>
                        <span class="text-gray-500">Data Points:</span>
                        <span class="font-medium">@unit.DataPoints.Count</span>
                    </div>
                    <div>
                        <span class="text-gray-500">Status:</span>
                        @if (unit.IsActive)
                        {
                            <span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-green-100 text-green-800">Active</span>
                        }
                        else
                        {
                            <span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-red-100 text-red-800">Inactive</span>
                        }
                    </div>
                    <div>
                        <span class="text-gray-500">Created:</span>
                        <span class="font-medium">@unit.CreatedAt.ToString("MMM dd, yyyy")</span>
                    </div>
                </div>
            </div>
        }
    }
    else
    {
        <div class="col-span-full text-center py-8">
            <div class="loading-spinner"></div>
            <p class="text-gray-600 mt-4">Loading engineering units...</p>
        </div>
    }
</div>

<!-- Add/Edit Unit Modal -->
@if (showModal)
{
    <div class="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div class="bg-white rounded-lg p-6 w-full max-w-md mx-4">
            <h2 class="text-xl font-semibold text-gray-900 mb-4">
                @(isEditing ? "Edit Engineering Unit" : "Add New Engineering Unit")
            </h2>
            
            <EditForm Model="currentUnit" OnValidSubmit="SaveUnit" FormName="UnitForm">
                <DataAnnotationsValidator />
                
                <div class="space-y-4">
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Name</label>
                        <InputText @bind-Value="currentUnit.Name" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" />
                        <ValidationMessage For="() => currentUnit.Name" class="text-red-500 text-sm mt-1" />
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Code</label>
                        <InputText @bind-Value="currentUnit.Code" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" />
                        <ValidationMessage For="() => currentUnit.Code" class="text-red-500 text-sm mt-1" />
                        <p class="text-xs text-gray-500 mt-1">Unique identifier for the unit (e.g., PROC-A, QC-LAB)</p>
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Description</label>
                        <InputTextArea @bind-Value="currentUnit.Description" class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" rows="3" />
                        <ValidationMessage For="() => currentUnit.Description" class="text-red-500 text-sm mt-1" />
                    </div>
                    
                    <div class="flex items-center">
                        <InputCheckbox @bind-Value="currentUnit.IsActive" class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded" />
                        <label class="ml-2 block text-sm text-gray-900">Active</label>
                    </div>
                </div>
                
                <div class="mt-6 flex justify-end space-x-3">
                    <button type="button" @onclick="CloseModal" class="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50">
                        Cancel
                    </button>
                    <button type="submit" disabled="@isSaving" class="px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 disabled:opacity-50">
                        @if (isSaving)
                        {
                            <span class="flex items-center">
                                <svg class="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                </svg>
                                Saving...
                            </span>
                        }
                        else
                        {
                            <span>@(isEditing ? "Update" : "Create")</span>
                        }
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
}

<!-- Success/Error Messages -->
@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="fixed top-4 right-4 bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded z-50">
        <div class="flex">
            <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
            </svg>
            @successMessage
        </div>
    </div>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="fixed top-4 right-4 bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded z-50">
        <div class="flex">
            <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 20 20">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
            </svg>
            @errorMessage
        </div>
    </div>
}

@code {
    private IEnumerable<EngineeringUnit>? engineeringUnits;
    private EngineeringUnit currentUnit = new();
    private bool showModal = false;
    private bool isEditing = false;
    private bool isSaving = false;
    private string successMessage = string.Empty;
    private string errorMessage = string.Empty;
    private Timer? messageTimer;

    protected override async Task OnInitializedAsync()
    {
        await LoadUnits();
    }

    private async Task LoadUnits()
    {
        try
        {
            engineeringUnits = await UnitService.GetAllUnitsAsync();
        }
        catch (Exception ex)
        {
            ShowError($"Error loading engineering units: {ex.Message}");
        }
    }

    private void ShowAddUnitModal()
    {
        currentUnit = new EngineeringUnit { IsActive = true };
        isEditing = false;
        showModal = true;
        ClearMessages();
    }

    private void EditUnit(EngineeringUnit unit)
    {
        currentUnit = new EngineeringUnit
        {
            Id = unit.Id,
            Name = unit.Name,
            Code = unit.Code,
            Description = unit.Description,
            IsActive = unit.IsActive
        };
        isEditing = true;
        showModal = true;
        ClearMessages();
    }

    private void CloseModal()
    {
        showModal = false;
        currentUnit = new();
        isEditing = false;
        ClearMessages();
    }

    private async Task SaveUnit()
    {
        isSaving = true;
        ClearMessages();

        try
        {
            if (isEditing)
            {
                await UnitService.UpdateUnitAsync(currentUnit);
                ShowSuccess("Engineering unit updated successfully!");
            }
            else
            {
                await UnitService.CreateUnitAsync(currentUnit);
                ShowSuccess("Engineering unit created successfully!");
            }

            await LoadUnits();
            CloseModal();
        }
        catch (Exception ex)
        {
            ShowError($"Error saving engineering unit: {ex.Message}");
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task ToggleUnitStatus(EngineeringUnit unit)
    {
        try
        {
            var updatedUnit = new EngineeringUnit
            {
                Id = unit.Id,
                Name = unit.Name,
                Code = unit.Code,
                Description = unit.Description,
                IsActive = !unit.IsActive
            };

            await UnitService.UpdateUnitAsync(updatedUnit);
            await LoadUnits();
            
            ShowSuccess($"Engineering unit {(updatedUnit.IsActive ? "activated" : "deactivated")} successfully!");
        }
        catch (Exception ex)
        {
            ShowError($"Error updating unit status: {ex.Message}");
        }
    }

    private void ShowSuccess(string message)
    {
        successMessage = message;
        errorMessage = string.Empty;
        StartMessageTimer();
    }

    private void ShowError(string message)
    {
        errorMessage = message;
        successMessage = string.Empty;
        StartMessageTimer();
    }

    private void ClearMessages()
    {
        successMessage = string.Empty;
        errorMessage = string.Empty;
        messageTimer?.Dispose();
    }

    private void StartMessageTimer()
    {
        messageTimer?.Dispose();
        messageTimer = new Timer(_ =>
        {
            InvokeAsync(() =>
            {
                ClearMessages();
                StateHasChanged();
            });
        }, null, 5000, Timeout.Infinite);
    }

    public void Dispose()
    {
        messageTimer?.Dispose();
    }
}
